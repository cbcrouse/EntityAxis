name: Auto Version & Publish NuGet

on:
    workflow_dispatch:
      inputs:
        reason:
          description: 'Why are you releasing?'
          required: true

jobs:
  increment-version:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUBACCESSTOKEN }}

    - name: Import GPG & Enable Git Signing
      # You may pin to the exact commit or the version.
      # uses: crazy-max/ghaction-import-gpg@111c56156bcc6918c056dbef52164cfa583dc549
      uses: crazy-max/ghaction-import-gpg@v5.2.0
      with:
        gpg_private_key: ${{ secrets.COMMIT_SIGNINGKEY }}
        git_config_global: true
        git_user_signingkey: true
        git_commit_gpgsign: true
        git_tag_gpgsign: true
        git_push_gpgsign: true
  
    - name: Reset Origin
      run: |
        git remote set-url origin "https://cbcrouse:${{ secrets.GITHUBACCESSTOKEN }}@github.com/cbcrouse/EntityAxis.git"
        git checkout ${{ github.ref_name }}

    - name: Install Versioning.NET
      run: |
        dotnet tool install --global Versioning.NET

    - name: Increment Version
      run: |
        dotnet-version increment-version-with-git-hints -g "." --branch-name ${{ github.ref_name }} --author-email ${{ vars.COMMIT_SIGNING_EMAIL }}

  publish-nuget:
    needs: increment-version
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.ref }}

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Restore and build all projects in Release mode
        run: dotnet build ./src/EntityAxis.sln --configuration Release

      - name: Publish all .nupkg files
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_API_KEY }}
          NUGET_SOURCE: https://api.nuget.org/v3/index.json
        run: |
          find . -type f -name "*.nupkg" -path "*/bin/Release/*" | while read nupkg; do
            echo "Publishing $nupkg..."
            dotnet nuget push "$nupkg" --skip-duplicate --api-key $NUGET_API_KEY --source $NUGET_SOURCE
          done
